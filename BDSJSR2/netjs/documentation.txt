TODO: documentation wiki page

1. Description:

This plug-in platform uses v8 engine as js interpretation execution tool. The listener registration mechanism is used throughout to complete the processing of specific events.

2. API documentation:

/******************************** JSAPI description ********************************/

// Name：fileReadAllText
// Function: File input streaming, reading text information
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: fname - file name (relative to BDS location)
// Return value: string
[Example] let t = fileReadAllText('outjs.js')

// Name：fileWriteAllText
// Function: Writes a new string into the file output stream
// Number of parameters：2
// Parameter type: string, string
// Detailed parameter explanation: fname - file name (relative to BDS location), content - text
// Return value: whether the write was successful
[Example] let w = fileWriteAllText('jslog.txt', 'example text')

// Name：fileWriteLine
// Function: Appends a line of string to the file output stream
// Number of parameters：2
// Parameter type: string, string
// Detailed parameter explanation: fname - file name (relative to BDS location), content - additional content
// Return value: whether the write was successful
[Example] let w = fileWriteLine('jslog.txt', 'example line')

// Name：log
// Function: prints messages on standard output stream
// Nummber of parameters：1
// Parameter type: string
// Detailed parameter explanation: output to the standard stream string
[Example] log('Hello world!')

// Name：logout
// Function: Sends a command output message (can be parsed)
// Number of parameters：1
// Parameter type: string
// Detailed parameter explanation: cmdout - command output string to be sent
[Example] logout('Execution result = correct')

// Name：TimeNow
// Function: Returns a string of current time
// Number of parameters: 0
// Return value: string
[Example] let t = TimeNow()

// Name：setShareData
// Function: saves shared data
// Number of parameters: 2
// Parameter type: string, data/function object
// Detailed parameter explanation: key - keyword, value - shared data
[Example] setShareData('TEXT_HELLO', 'Hello world!')

// Name：getShareData
// Function: Gets shared data
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: key - keyword
// Return value: shared data
[Example] let t = getShareData('TEXT_HELLO')

// Name：removeShareData
// Function: deletes shared data
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: key - keyword
// Return value: old data
[Example] let oldt = removeShareData('TEXT_HELLO')

// Name：setCommandDescribe
// Function: Sets a command description
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: cmd - command, description - command description
// Note: In the case of postponed registration, the client interface may not be changed
[Example] setCommandDescribe('cmdname', 'cmddescription')

// Name：addBeforeActListener
// Function: Adds a listener before the player event is loaded
// Number of parameters: 2
// Parameter type: string, function object
// Detailed parameter explanation: key - keyword for registration, func - callback function object for event trigger
[Example] addBeforeActListener('onChat', function (e){ log(e) })

// Name：removeBeforeActListener
// Function: Removes player event listener
// Number of parameters: 2
// Parameter type: string, function object
// Detailed parameter explanation: key - registration keyword, oldfunc - removed callback function object
// Return value: whether the removal was successful
[Example] let v = removeBeforeActListener('onChat', lis)

// Name：addAfterActListener
// Function: Adds a listener after the player event is loaded
// Number of parameters: 2
// Parameter type: string, function object
// Detailed parameter explanation: key - keyword for registration, func - callback function object for event trigger
[Example] addAfterActListener('onChat', function (e){ log(e) })

// Name：removeAfterActListener
// Function: Removes the listener after the player event is loaded
// Number of parameters: 2
// Parameter type: string, function object
// Detailed parameter explanation: key - registration keyword, oldfunc - removed callback function object
// Return value: whether the removal was successful
[Example] let v = removeAfterActListener('onChat', lis)

// Name：runcmd
// Function: executes cmd command
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: cmd - grammatically correct MC command
// Return value: whether it is executed normally
[Example] let r = runcmd('w @a Hello world!')

// Name：getOnLinePlayers
// Function：Gets a list of online players
// Number of parameters: 0
// Return value: Json string of the player list
[Example] let v = getOnLinePlayers()

// Name：getStructure
// Function：Gets a structure
// Number of parameters: 5
// Parameter type: integer, string, string, Boolean, Boolean
// Detailed parameter explanation: dimensionid - dimension, posa - coordinate JSON string, posb - coordinate JSON string, exent - whether to export entities, exblk - whether to export blocks
// Return value: structure json string
[Example] let d = getStructure(0, '{"x":0, "y":4, "z":0}', '{"x":10, "y":14, "z":10}', false, true)

// Name：setStructure
// Function：Sets a structure to the specified location
// Number of parameters: 6
// Parameter type: string, integer, string, integer, boolean, boolean
// Detailed parameter explanation: strnbt - structure JSON string, dimensionid - dimension, posa - starting point coordinate JSON string, rot - rotation type, exent - whether to import entities, exblk - whether to import blocks
// Return value: whether the setting is successful
[Example] let r = setStructure(fileReadAllText('data.json'), 0, '{"x":0, "y":4, "z":0}', 0, true, true)

// Name：reNameByUuid
// Function：Renames a specified player name
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid - the uuid string of the online player, newName - the new name
// Return value: Whether the naming is successful
// (Note: This function may not change the actual display name of the client)
[Example] let r = reNameByUuid('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '[IDIOT KING] qIMIXERIp')

// Name：getPlayerAbilities
// Function：Gets player ability table
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: ability json string
[Example] let a = getPlayerAbilities('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：setPlayerAbilities
// Function：Sets player ability table
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid - uuid string of online players, newAbilities - new ability json data string
// Return value: whether the setting is successful
// (Note: This function may not change the actual display ability of the client)
[Example] let r = setPlayerAbilities('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '{"opencontainers": false}')

// Name：getPlayerAttributes
// Function：Gets the player attribute table
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: attribute json string
[Example] let t = getPlayerAttributes('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：setPlayerTempAttributes
// Function：Sets player attribute temporary value table
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid - the uuid string of the online player, newTempAttributes - the new attribute temporary value json data string
// Return value: whether the setting is successful
// (Note: This function may not change the actual display value of the client)
[Example] let r = setPlayerTempAttributes('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '{"hunger": 10}')

// Name：getPlayerMaxAttributes
// Function：Gets the player attribute upper limit table
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: attribute upper limit json string
[Example] let m = getPlayerMaxAttributes('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：setPlayerMaxAttributes
// Function：Sets player attribute upper limit table
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid - the uuid string of the online player, newMaxAttributes - the new attribute upper limit json data string
// Return value: whether the setting is successful
// (Note: This function may not change the actual display value of the client)
[Example] let r = setPlayerMaxAttributes('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '{"maxhealth": 200}')

// Name：getPlayerItems
// Function：Gets a list of all items of the player
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: item list json string
[Example] let t = getPlayerItems('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：getPlayerSelectedItem
// Function：Get the player's currently selected item information
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: the currently selected item information json string
[Example] let i = getPlayerSelectedItem('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：setPlayerItems
// Function：Sets the player's list of all items
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid-the uuid string of the online player, newItems - the json data string of the new item list
// Return value: whether the setting is successful
// (Note: The actual items in the game may not be changed under certain conditions)
[Example] let r = setPlayerItems('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9','{"Offhand":{"tt":9,"tv":[{"tt":10,"tv":[{"ck":"Count","cv":{"tt":1,"tv":1}},{"ck":"Damage","cv":{"tt":2,"tv":0}},{"ck":"Name","cv":{"tt":8,"tv":"minecraft:trident"}},{"ck":"tag","cv":{"tt":10,"tv":[{"ck":"ench","cv":{"tt":9,"tv":[{"tt":10,"tv":[{"ck":"id","cv":{"tt":2,"tv":7}},{"ck":"lvl","cv":{"tt":2,"tv":8888}}]}]}}]}}]}]}}')

// Name：addPlayerItemEx
// Function：Adds an item to the player
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid-the uuid string of the online player, item-the item json data string
// Return value: whether the addition is successful
// (Note: The actual items in the game may not be changed under certain conditions)
[Example] let r = setPlayerItems('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '{"tt":10,"tv":[{"ck":"Count","cv":{"tt":1,"tv":1}},{"ck":"Damage","cv":{"tt":2,"tv":0}},{"ck":"Name","cv":{"tt":8,"tv":"minecraft:trident"}},{"ck":"tag","cv":{"tt":10,"tv":[{"ck":"ench","cv":{"tt":9,"tv":[{"tt":10,"tv":[{"ck":"id","cv":{"tt":2,"tv":10}},{"ck":"lvl","cv":{"tt":2,"tv":9999}}]}]}}]}}]}')

// Name：addPlayerItem
// Function：Adds an item to the player
// Number of parameters: 4
// Parameter type: string
// Detailed parameter explanation: uuid - uuid string of online players, id - item id value, aux - item special value, count - quantity
// Return value: whether the increase is successful
// (Note: The actual items in the game may not be changed under certain conditions)
[Example] let r = addPlayerItem('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 9, 0, 32)

// Name：getPlayerEffects
// Function：Gets a list of all player effects
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid-the uuid string of the online player
// Return value: effect list json string
[Example] let e = getPlayerEffects('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：setPlayerEffects
// Function：Sets the player's all effects list
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid-uuid string of online players, newEffects-json data string of new effect list
// Return value: whether the setting is successful
[Example] let r = setPlayerEffects('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '{"tt":9,"tv":[{"tt":10,"tv":[{"ck":"Ambient","cv":{"tt":1,"tv":0}},{"ck":"Amplifier","cv":{"tt":1,"tv":0}},{"ck":"DisplayOnScreenTextureAnimation","cv":{"tt":1,"tv":0}},{"ck":"Duration","cv":{"tt":3,"tv":3461}},{"ck":"DurationEasy","cv":{"tt":3,"tv":3461}},{"ck":"DurationHard","cv":{"tt":3,"tv":3461}},{"ck":"DurationNormal","cv":{"tt":3,"tv":3461}},{"ck":"Id","cv":{"tt":1,"tv":16}},{"ck":"ShowParticles","cv":{"tt":1,"tv":1}}]}]}')

// Name：setPlayerBossBar
// Function：Sets player custom health bar
// Number of parameters: 3
// Parameter type: string, string, floating point
// Detailed parameter explanation: uuid - the uuid string of the online player, title - the title of the health bar, percent - the percentage of the health bar
// Return value: whether the setting is successful
[Example] let r = setPlayerBossBar('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 'Welcome to my server!', 1.00)

// Name：removePlayerBossBar
// Function：Clears player custom health bar
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: whether the clear is successful
[Example] let r = removePlayerBossBar('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：setPlayerSidebar
// Function：Sets up a temporary scoreboard for the player's custom sidebar
// Number of parameters: 3
// Parameter type: string, string, string
// Detailed parameter explanation: uuid - the uuid string of the online player, title - the sidebar title, list - the list string array
// 返回值：是否设置成功
// (Note: The list always starts from the first line, and the total does not exceed 15 lines)
[Example] let r = setPlayerSidebar('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 'Custom scoreboard', '["first line", "second line", "Where am I?    "]')

// Name：removePlayerSidebar
// Function：Clears player custom sidebar
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: whether the clear is successful
[Example] let r = removePlayerSidebar('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：getPlayerPermissionAndGametype
// Function：Acquires player permissions and game modes
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - the uuid string of the online player
// Return value: json string of permission and mode
[Example] let t = getPlayerPermissionAndGametype('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：setPlayerPermissionAndGametype
// Function：Sets player permissions and game modes
// Number of parameters: 2
// Parameter type: string, string
// Detailed parameter explanation: uuid - the uuid string of the online player, newModes - the new permission or mode json data string
// Return value: whether the setting is successful
// (Note: The actual ability in the game may not be changed under certain conditions)
[Example] let r = setPlayerPermissionAndGametype('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '{"gametype" : 3}')

// Name：selectPlayer
// Function：Query basic information of online players
// Number of parameters: 1
// Parameter type: string
// Detailed parameter explanation: uuid - uuid string of online players
// Return value: player basic information json string
[Example] let e = selectPlayer('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9')

// Name：transferserver
// Function：Sends players to the designated server
// Number of parameters: 3
// Parameter type：string，string，integer
// Detailed parameter explanation: uuid - uuid string of online players, addr - server to be transferred, port - port
// Return value: whether the transmission is successful
[Example] let t = transferserver('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 'www.example.com', 19132)

// Name：teleport
// Function：Teleports the player to the specified coordinates and dimensions
// Number of parameters: 5
// Parameter type：string，floating point，floating point，floating point，integer
// Detailed parameter explanation: uuid - uuid string of online players, X - x, Y - y, Z - z, dimensionid - dimension ID
// Return value: whether the teleportation is successful
[Example] let t = teleport('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 10, 99, 10, 2)

// Name：talkAs
// Function：Simulates a player sending a text
// Number of parameters: 2
// Parameter type：string，string
// Detailed parameter explanation: uuid - uuidstring of online players, msg - chat message for simulation
// 返回值：是否发送成功
[Example] let t = talkAs('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 'Hello world!')

// Name：runcmdAs
// Function：Simulates player's command execution
// Number of parameters: 2
// Parameter type：string，string
// Detailed parameter explanation: uuid - the uuid string of the online player, cmd - the command to be simulated
// Return value: whether the transmission was successful
[Example] let t = runcmdAs('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '/w @a Hello world!')

// Name：disconnectClient
// Function：Disconnects a player
// Number of parameters: 2
// Parameter type：string，string
// Detailed parameter explanation: uuid - the uuid string of the online player, tips - the disconnect prompt (set a blank value as the default value)
// Return value: Whether the connection is successfully disconnected
[Example] let t = disconnectClient('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 'Example message')

// Name：sendSimpleForm
// Function：Sends a simple form to the specified player
// Number of parameters: 4
// Parameter type：string，string，string，string
// Detailed parameter explanation: uuid - uuid string of online players, title - form title, content - content, buttons - button text array string
// Return value: id of the created form, 0 means sending failed
[Example] let fid = sendSimpleForm('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 'Title', 'Choose option:', '["Heal","Die","Help"]')

// Name：sendModalForm
// Function：Sends a modal dialog to the specified player
// Number of parameters: 5
// Parameter type：string，string，string，string，string
// Detailed parameter explanation: uuid - the uuid string of the online player, title - the title of the form, content - the content, button1 button 1 title (click the button to select true), button2 button 2 title (click the button to select false)
// Return value: id of the created form, 0 means sending failed
[Example] let fid = sendModalForm('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', 'Title', 'Choose option:', 'Heal', 'Die')

// Name：sendCustomForm
// Function：Sends a custom form to the specified player
// Number of parameters: 2
// Parameter type：string，string
// Detailed parameter explanation: uuid - uuid string of online players, json - json string of custom form (to use custom form type, refer to nk, pm format or minebbs column)
// Return value: id of the created form, 0 means sending failed
[Example] let fid = sendCustomForm('8f976e22-78bc-3fe1-8ee5-cf5ff56347b9', '{"content":[{"type":"label","text":"This is a text label"},{"placeholder":"Examble text","default":"","type":"input","text":""},{"default":true,"type":"toggle","text":"Switch"},{"min":0.0,"max":10.0,"step":2.0,"default":3.0,"type":"slider","text":"slider"},{"default":1,"steps":["Step 1","Step 2","Step 3"],"type":"step_slider","text":"Step slider"},{"default":1,"options":["Option 1","Option 2","Option 3"],"type":"dropdown","text":"Drop-down box"}], "type":"custom_form","title":"This is a custom form"}')

// Name：releaseForm
// Function：Releases a form
// Number of parameters: 1
// Parameter type：integer
// Detailed parameter explanation: formid - form id
// Return value: whether the release was successful
//(Note: The form that has been received will be automatically released)
[Example] let r = releaseForm(1000)

// Name：request
// Function：Initiate a remote HTTP request
// Number of parameters: 4
// Parameter type：string，string，string，function object
// Detailed parameter explanation：urlpath - remote interface path, mode - access method, params - additional data, func - get result callback
[Example] request('http://www.example.com', 'GET', 'name=act', function(e){})

// Name：setTimeout
// Function：Delays execution of an instruction
// Number of parameters: 2
// Parameter type：string/function，integer
// Detailed parameter explanation：code - the instruction string/function object to be executed with delay, millisec -delay in milliseconds
[Example] setTimeout('log("Hello world!")', 1000)

// Name：mkdir
// Function：Creates a folder
// Number of parameters: 1
// Parameter type：string
// Detailed parameter explanation：dirname - folder path
// Return value: True - whether the directory was created successfully/exists, False - failed to create
[Example] let r = mkdir('C:\\newdir')

// Name：getWorkingPath
// Function：Gets working directory
// Number of parameters: 0
// Return value: the working directory of the current application
[Example] let d = getWorkingPath()

3. registration:

/******************************** Registration interface and callback data description ********************************/

Registration example：

[Example] addBeforeActListener(key, function(e){})

key - Keyword
"onUseItem" - Use item callback
e - Return data
 playername - Player name
 dimension - Player dimension
 dimensionid - Player dimension ID
 isstand - Whether the player's feet are on the ground/hanging
 XYZ - Where the player is
 position - The location of the operation block
 itemid - Item id
 itemaux - Item special value
 itemname - Item Name
 RESULT - Whether the original event operation was successful (After event only)

Description for other keywords:

 "onServerCmd" - Command input monitoring
 "onServerCmdOutput" - Command output information monitoring
 "onFormSelect" - Player's form choose
 "onUseItem" - Item using monitoring
 "onMove" - Movement monitoring
 "onAttack" - Attack monitoring
 "onPlacedBlock" - Block placing monitoring
 "onDestroyBlock" - Block destroying monitoring
 "onStartOpenChest" - Chest opening monitoring
 "onStartOpenBarrel" - Barrel opening monitoring
 "onChangeDimension" - Dimension switching monitoring
 "onLoadName" - Name loading monitoring
 "onPlayerLeft" - Player disconnection monitoring
 "onStopOpenChest" - Chest closing monitoring
 "onStopOpenBarrel" - Barrel closing monitoring
 "onSetSlot" - Inventory slot actions monitoring (put in/remove)
 "onMobDie" - Mob death monitoring
 "onMobHurt" - Mob hurt monitoring
 "onRespawn" - Respawn monitoring
 "onInputText" - Player's text input monitoring
 "onInputCommand" - Player's command input monitoring
 "onBlockCmd" - Command block/command block minecart's command input monitoring
 "onNpcCmd" - NPC's command input monitoring
 "onCommandBlockUpdate" - Command block updates monitoring
 "onLevelExplode" - Explosion monitoring
 "onChat" - Chat messages monitoring
 "onEquippedArmor" - Armor equipping monitoring
 "onLevelUp" - Exp level up monitoring
